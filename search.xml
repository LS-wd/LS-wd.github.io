<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LS网站收藏</title>
    <url>/2019/12/18/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="你好，请输入密码查看加密内容！！" />
    <label for="hbePass">你好，请输入密码查看加密内容！！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="cd05c5c723ff23860246b8b851a4039496a8be90a84742709fec2d8aa2483cbd"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>收藏</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现的队员管理系统</title>
    <url>/2019/11/28/Java%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="首先，创建一个Member类"><a href="#首先，创建一个Member类" class="headerlink" title="首先，创建一个Member类"></a>首先，创建一个Member类</h1><h2 id="该类含有四个属性"><a href="#该类含有四个属性" class="headerlink" title="该类含有四个属性"></a>该类含有四个属性</h2><h3 id="ID：队员编号"><a href="#ID：队员编号" class="headerlink" title="ID：队员编号"></a>ID：队员编号</h3><h3 id="name：队员姓名"><a href="#name：队员姓名" class="headerlink" title="name：队员姓名"></a>name：队员姓名</h3><h3 id="age：队员年龄"><a href="#age：队员年龄" class="headerlink" title="age：队员年龄"></a>age：队员年龄</h3><h3 id="salary：队员薪水"><a href="#salary：队员薪水" class="headerlink" title="salary：队员薪水"></a>salary：队员薪水</h3><h2 id="Java代码如下"><a href="#Java代码如下" class="headerlink" title="Java代码如下"></a>Java代码如下</h2><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建队员类，并声明四个private类型的变量（姓名，编号，年龄，薪水）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为Member类的空参和全参构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name, String id, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为各个变量的get，set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建一个管理队员的Manage类"><a href="#创建一个管理队员的Manage类" class="headerlink" title="创建一个管理队员的Manage类"></a>创建一个管理队员的Manage类</h1><h2 id="该类有两种构造方法"><a href="#该类有两种构造方法" class="headerlink" title="该类有两种构造方法"></a>该类有两种构造方法</h2><h3 id="1、空参数构造方法"><a href="#1、空参数构造方法" class="headerlink" title="1、空参数构造方法"></a>1、空参数构造方法</h3><h3 id="2、带有Arrylist集合的构造方法，Arrylist只接受Member类型的参数"><a href="#2、带有Arrylist集合的构造方法，Arrylist只接受Member类型的参数" class="headerlink" title="2、带有Arrylist集合的构造方法，Arrylist只接受Member类型的参数"></a>2、带有Arrylist集合的构造方法，Arrylist只接受Member类型的参数</h3><h2 id="该Manage类有五个成员方法"><a href="#该Manage类有五个成员方法" class="headerlink" title="该Manage类有五个成员方法"></a>该Manage类有五个成员方法</h2><h3 id="1、向ArrayList集合中添加对象的方法（adds）"><a href="#1、向ArrayList集合中添加对象的方法（adds）" class="headerlink" title="1、向ArrayList集合中添加对象的方法（adds）"></a>1、向ArrayList集合中添加对象的方法（adds）</h3><h3 id="2、从ArrayList集合中删除对象的方法（delete）"><a href="#2、从ArrayList集合中删除对象的方法（delete）" class="headerlink" title="2、从ArrayList集合中删除对象的方法（delete）"></a>2、从ArrayList集合中删除对象的方法（delete）</h3><h3 id="3、输出某一个队员的方法（select）"><a href="#3、输出某一个队员的方法（select）" class="headerlink" title="3、输出某一个队员的方法（select）"></a>3、输出某一个队员的方法（select）</h3><h3 id="4、更新队员信息的方法（update）"><a href="#4、更新队员信息的方法（update）" class="headerlink" title="4、更新队员信息的方法（update）"></a>4、更新队员信息的方法（update）</h3><h3 id="5、输出所有成员信息的方法（selectAll）"><a href="#5、输出所有成员信息的方法（selectAll）" class="headerlink" title="5、输出所有成员信息的方法（selectAll）"></a>5、输出所有成员信息的方法（selectAll）</h3><h2 id="Java代码如下-1"><a href="#Java代码如下-1" class="headerlink" title="Java代码如下"></a>Java代码如下</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//导入ArrayList包</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manage</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造一个存储成员的列表并初始化为空表</span></span><br><span class="line">    ArrayList&lt;Member&gt; lists = <span class="keyword">null</span>; <span class="comment">//此处&lt;Member&gt;指定对象类型必须为Member类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Manage的空参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Manage的带集合构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manage</span><span class="params">(ArrayList&lt;Member&gt; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义向集合中添加对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Member&gt; <span class="title">adds</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        lists.add(member);</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义从集合中删除对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Member member)</span></span>&#123;</span><br><span class="line">        lists.remove(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义输出一个队员的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">select</span><span class="params">(String ename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//将从集合lists中取出的对象强转为Member类型</span></span><br><span class="line">            Member member = (Member) lists.get(i);</span><br><span class="line">            <span class="comment">//判断获得的名字和enname的内容是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (member.getName().equals(ename)) &#123;</span><br><span class="line">                System.out.println(member.getId() + <span class="string">" "</span> + member.getName() + <span class="string">" "</span> + member.getAge() + <span class="string">" "</span> + member.getSalary());</span><br><span class="line">                <span class="keyword">return</span> member;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义更新队员信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        String ename = member.getName();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">            Member member1 = (Member) lists.get(i);</span><br><span class="line">            <span class="keyword">if</span> (member1.getName().equals(ename)) &#123;</span><br><span class="line">                member1.setSalary(<span class="number">66666</span>);</span><br><span class="line">                System.out.println(member1.getId() + <span class="string">" "</span> + member1.getName() + <span class="string">" "</span> + member1.getAge() + <span class="string">" "</span> + member1.getSalary());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义输出所有成员信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">(ArrayList&lt;Member&gt; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.size(); i++) &#123;</span><br><span class="line">            Member member = (Member) lists.get(i);</span><br><span class="line">            System.out.println(member.getId() + <span class="string">" "</span> + member.getName() + <span class="string">" "</span> + member.getAge() + <span class="string">" "</span> + member.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建主类（Main）"><a href="#创建主类（Main）" class="headerlink" title="创建主类（Main）"></a>创建主类（Main）</h1><h2 id="该类为测试主类，实例化三个对象"><a href="#该类为测试主类，实例化三个对象" class="headerlink" title="该类为测试主类，实例化三个对象"></a>该类为测试主类，实例化三个对象</h2><h3 id="1、存储队员对象的“容器”——lists"><a href="#1、存储队员对象的“容器”——lists" class="headerlink" title="1、存储队员对象的“容器”——lists"></a>1、存储队员对象的“容器”——lists</h3><h3 id="2、管理对象——manage"><a href="#2、管理对象——manage" class="headerlink" title="2、管理对象——manage"></a>2、管理对象——manage</h3><h3 id="3、队员对象——member"><a href="#3、队员对象——member" class="headerlink" title="3、队员对象——member"></a>3、队员对象——member</h3><h2 id="然后以循环控制来进行相应的增删改查功能的实现"><a href="#然后以循环控制来进行相应的增删改查功能的实现" class="headerlink" title="然后以循环控制来进行相应的增删改查功能的实现"></a>然后以循环控制来进行相应的增删改查功能的实现</h2><h2 id="Java代码如"><a href="#Java代码如" class="headerlink" title="Java代码如"></a>Java代码如</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入所需要的的jar包</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//团队管理系统入口函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化lists，存入三个队员对象。</span></span><br><span class="line">        ArrayList&lt;Member&gt; lists = <span class="keyword">new</span> ArrayList&lt;Member&gt;();</span><br><span class="line">        Member member1 = <span class="keyword">new</span> Member(<span class="string">"张三"</span>,<span class="string">"1"</span>,<span class="number">22</span>,<span class="number">10000</span>);</span><br><span class="line">        Member member2 = <span class="keyword">new</span> Member(<span class="string">"李四"</span>,<span class="string">"2"</span>,<span class="number">28</span>,<span class="number">8000</span>);</span><br><span class="line">        Member member3 = <span class="keyword">new</span> Member(<span class="string">"王五"</span>,<span class="string">"3"</span>,<span class="number">23</span>,<span class="number">5000</span>);</span><br><span class="line">        Member member4 = <span class="keyword">new</span> Member(<span class="string">"马六"</span>,<span class="string">"4"</span>,<span class="number">25</span>,<span class="number">7000</span>);</span><br><span class="line">        <span class="comment">//向lists集合中存入对象</span></span><br><span class="line">        lists.add(member1);</span><br><span class="line">        lists.add(member2);</span><br><span class="line">        lists.add(member3);</span><br><span class="line">        lists.add(member4);</span><br><span class="line">        <span class="comment">//构造一个Manage对象,并将lists集合传入其中</span></span><br><span class="line">        Manage manage = <span class="keyword">new</span> Manage(lists);</span><br><span class="line">        <span class="comment">//创建菜单</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"欢迎使用队员管理系统"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入对应的数字来进行对应的操作！"</span>);</span><br><span class="line">            System.out.println(<span class="string">"1--添加"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2--输出所有"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3--输出一个"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4--删除"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5--退出"</span>);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            i = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">//输入一个雇员的信息</span></span><br><span class="line">                    Scanner sc1 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.println(<span class="string">"请输入队员ID："</span>);</span><br><span class="line">                    String id = sc1.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入名字："</span>);</span><br><span class="line">                    String name = sc1.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入年龄："</span>);</span><br><span class="line">                    String age = sc1.next();</span><br><span class="line">                    System.out.println(<span class="string">"请输入薪水："</span>);</span><br><span class="line">                    String sal = sc1.next();</span><br><span class="line">                    <span class="keyword">int</span> age1 = Integer.parseInt(age);<span class="comment">//String==int转换</span></span><br><span class="line">                    <span class="keyword">double</span> sal1 = Double.parseDouble(sal);<span class="comment">//String==double转换</span></span><br><span class="line">                    <span class="comment">//构造一个雇员实例</span></span><br><span class="line">                    Member member = <span class="keyword">new</span> Member(id, name, age1, sal1);</span><br><span class="line">                    <span class="comment">//添加一个雇员，调用EmpManager的方法。理解为什么不直接写一条添加语句？</span></span><br><span class="line">                    manage.adds(member1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    manage.selectAll(lists);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.println(<span class="string">"请输入名字："</span>);</span><br><span class="line">                    String ename1 = sc2.next();</span><br><span class="line">                    Member m = manage.select(ename1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    Scanner sc3 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                    System.out.println(<span class="string">"请输入名字："</span>);</span><br><span class="line">                    String ename2 = sc3.next();</span><br><span class="line">                    Member e21 = manage.select(ename2);</span><br><span class="line">                    manage.delete(e21);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Date类的学习笔记</title>
    <url>/2019/11/28/java%E4%B8%ADDate%E7%B1%BB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Date类的练习"><a href="#Date类的练习" class="headerlink" title="Date类的练习"></a>Date类的练习</h1><h2 id="导包，Date类是在java-util包下，所以我们需要导入util包（只有java-lang包不需要导入。）"><a href="#导包，Date类是在java-util包下，所以我们需要导入util包（只有java-lang包不需要导入。）" class="headerlink" title="导包，Date类是在java.util包下，所以我们需要导入util包（只有java.lang包不需要导入。）"></a>导包，Date类是在java.util包下，所以我们需要导入util包（只有java.lang包不需要导入。）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure>
<h2 id="然后实例化对象"><a href="#然后实例化对象" class="headerlink" title="然后实例化对象"></a>然后实例化对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="测试示例："><a href="#测试示例：" class="headerlink" title="测试示例："></a>测试示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">learn_data</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date data = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DateFormat类的练习"><a href="#DateFormat类的练习" class="headerlink" title="DateFormat类的练习"></a>DateFormat类的练习</h1><h2 id="DateFormat类简介："><a href="#DateFormat类简介：" class="headerlink" title="DateFormat类简介："></a>DateFormat类简介：</h2><h3>DateFormat是一个用于日期/时间格式化子类的抽象类，通过这个类可以完成日期和文本之间的转换（Date和String对象之间转换）。<br>
DateFormat类的两个作用：<br>
 格式化（日期->文本）<br>
 解析（文本->日期）<br>
注意：DateFormat类是在java.text包下；并且他为一个抽象类。可以直接使用它的子类SimpleDateFormat 
<br>

<p>常用的格式规则如下：<br><br> y &ensp;&ensp;年<br><br> M&ensp;&ensp;月<br><br> d &ensp;&ensp;日<br><br> H &ensp;&ensp;时<br><br> m&ensp;&ensp;分<br><br> s &ensp;&ensp;秒<br></p>
</h3>

<h3 id="调用DateFormat类的子类SimpleDateFormat"><a href="#调用DateFormat类的子类SimpleDateFormat" class="headerlink" title="调用DateFormat类的子类SimpleDateFormat"></a>调用DateFormat类的子类SimpleDateFormat</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//format方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">learn1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        创建SimpleDateFormat对象，构造方法中传递指定的模式，"yyyy-MM-dd HH-mm-ss"</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH-mm-ss"</span>);</span><br><span class="line"><span class="comment">//        调用SimpleDateFormat对象中的方法format，按照指定的模把Date日期格式化为符合模式的字符串（文本）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String df = sdf.format(date);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(df);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">learn1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">//        创建SimpleDateFormat对象，构造方法中传递指定的模式，"yyyy-MM-dd HH-mm-ss"</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH-mm-ss"</span>);</span><br><span class="line"><span class="comment">//        调用SimpleDateFormat对象中的方法format，按照指定的模把Date日期格式化为符合模式的字符串（文本）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String df = sdf.format(date);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(df);</span><br><span class="line"><span class="comment">//        parse方法的使用</span></span><br><span class="line">        Date date2 = sdf.parse(<span class="string">"2019-11-08 17-59-22"</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3>注意：parse方法默认声明有异常ParseException，所以需要对该异常进行处理。（向上抛出或者try catch进行处理）</h3>
]]></content>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Calendar类的学习笔记</title>
    <url>/2019/11/28/Java%E4%B8%ADCalendar%E7%B1%BB%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>java.util.Calendar类是在Date类之后出现的，替换了很多Date的方法。Calendar类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是为了方便取各个时间属性的。<br><br>Calendar类为抽象类，，不能直接实例化对象，需要通过静态方法创建，返回子类对象。例如：<br><br><code> Calendar c = Calender.getInstance();//多态写法</code></p>
</blockquote>
<h1 id="Calendar类的四种常用方法示例："><a href="#Calendar类的四种常用方法示例：" class="headerlink" title="Calendar类的四种常用方法示例："></a>Calendar类的四种常用方法示例：</h1><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Calendar_ls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">learn1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo1();</span><br><span class="line">        demo2();</span><br><span class="line">        demo3();</span><br><span class="line">        demo4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        本方法用于测试返回当前的日期</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);<span class="comment">//获取年份</span></span><br><span class="line">        System.out.println(year+<span class="string">"年"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//获取月份（这里获取的是西方的月份：0-11，而我们的月份是1-12）</span></span><br><span class="line">        System.out.println(month+<span class="string">"月"</span>);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//获取日期（天）</span></span><br><span class="line">        <span class="comment">//int date1 = c.get(Calendar.DATE); 等价于上边的获取天数方式</span></span><br><span class="line">        System.out.println(date+<span class="string">"日"</span>);</span><br><span class="line">        System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        本方法将给定的日历字段设定为给定值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"设定年月日之后的日期为："</span>);</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(Calendar.YEAR,<span class="number">9876</span>);<span class="comment">//设定当前为9876年</span></span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">11</span>);<span class="comment">//设置月份为12月</span></span><br><span class="line">        c.set(Calendar.DATE,<span class="number">12</span>);<span class="comment">//设置日期为12月第12天</span></span><br><span class="line">        <span class="comment">//或者使用同时设置的方法（重载方法）</span></span><br><span class="line">        <span class="comment">//c.set(1999,1,1); 同时传入年月日的参数也是可以的</span></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);<span class="comment">//获取年份</span></span><br><span class="line">        System.out.println(year+<span class="string">"年"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//获取月份（这里获取的是西方的月份：0-11，而我们的月份是1-12）</span></span><br><span class="line">        System.out.println(month+<span class="string">"月"</span>);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//获取日期（天）</span></span><br><span class="line">        <span class="comment">//int date1 = c.get(Calendar.DATE); 等价于上边的获取天数方式</span></span><br><span class="line">        System.out.println(date+<span class="string">"日"</span>);</span><br><span class="line">        System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*此方法用于增加或减少日期值*/</span></span><br><span class="line">        System.out.println(<span class="string">"ADD方法执行！！"</span>);</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.add(Calendar.YEAR,<span class="number">2</span>);<span class="comment">//当前年份+2</span></span><br><span class="line">        c.add(Calendar.MONTH,-<span class="number">2</span>);<span class="comment">//当前月份-2</span></span><br><span class="line">        c.add(Calendar.DATE,-<span class="number">5</span>);<span class="comment">//当前天数-5</span></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);<span class="comment">//获取年份</span></span><br><span class="line">        System.out.println(year+<span class="string">"年"</span>);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH)+<span class="number">1</span>;<span class="comment">//获取月份（这里获取的是西方的月份：0-11，而我们的月份是1-12）</span></span><br><span class="line">        System.out.println(month+<span class="string">"月"</span>);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DAY_OF_MONTH);<span class="comment">//获取日期（天）</span></span><br><span class="line">        <span class="comment">//int date1 = c.get(Calendar.DATE); 等价于上边的获取天数方式</span></span><br><span class="line">        System.out.println(date+<span class="string">"日"</span>);</span><br><span class="line">        System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*此方法用于将日历对象转化为日期对象*/</span></span><br><span class="line">        System.out.println(<span class="string">"将日历转化为日期方法！！"</span>);</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        Date time = c.getTime();</span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>博客加密功能的实现</title>
    <url>/2019/11/28/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="首先在-站点配置文件-中启用插件"><a href="#首先在-站点配置文件-中启用插件" class="headerlink" title="首先在 站点配置文件 中启用插件:"></a>首先在 <strong>站点配置文件</strong> 中启用插件:</h1><h2>在根目录下编辑<code>_config.yml</code>文件</h2>

<pre><code>encrypt:
    enable: true</code></pre><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2>应在根目录下执行下边的命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h1 id="然后在文章的头部添加上对应的字段，如-password-abstract-message"><a href="#然后在文章的头部添加上对应的字段，如-password-abstract-message" class="headerlink" title="然后在文章的头部添加上对应的字段，如 password, abstract, message"></a>然后在文章的头部添加上对应的字段，如 password, abstract, message</h1><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">message:  输入密码，查看文章</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h1 id="高阶玩法"><a href="#高阶玩法" class="headerlink" title="高阶玩法"></a>高阶玩法</h1><h2 id="如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在-站点配置文件中。"><a href="#如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在-站点配置文件中。" class="headerlink" title="如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件中。"></a>如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 站点配置文件中。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  default_abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请与我联系。</span><br><span class="line">  default_message: 输入密码，查看文章。</span><br></pre></td></tr></table></figure>

<h1 id="如果你希望对某一篇特定的文章做特殊处理（如本文的-abstract-，可以在对应文章的头部添加"><a href="#如果你希望对某一篇特定的文章做特殊处理（如本文的-abstract-，可以在对应文章的头部添加" class="headerlink" title="如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加"></a>如果你希望对某一篇特定的文章做特殊处理（如本文的 abstract ，可以在对应文章的头部添加</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章加密</span><br><span class="line">date: 2019-01-04T22:20:13.000Z</span><br><span class="line">category: 教程</span><br><span class="line">tags:</span><br><span class="line">  - 博客</span><br><span class="line">  - Hexo</span><br><span class="line">keywords: 博客文章密码</span><br><span class="line">password: TloveY</span><br><span class="line">abstract: 密码：TloveY</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2>此时，博客头部的 abstract 会覆盖站点配置文件的 default_abstract 实现自定义。</h2>
]]></content>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>新版Ubuntu下搭建攻防模拟平台（awd-platform）</title>
    <url>/2019/11/28/AWD%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线下搭建自己的AWD平台可以练习自己的各种安全知识，深度模拟网络攻防的场景。我们使用github上边开源的一个awd项目来搭建我们自己的练习平台。"><a href="#线下搭建自己的AWD平台可以练习自己的各种安全知识，深度模拟网络攻防的场景。我们使用github上边开源的一个awd项目来搭建我们自己的练习平台。" class="headerlink" title="线下搭建自己的AWD平台可以练习自己的各种安全知识，深度模拟网络攻防的场景。我们使用github上边开源的一个awd项目来搭建我们自己的练习平台。"></a>线下搭建自己的AWD平台可以练习自己的各种安全知识，深度模拟网络攻防的场景。我们使用github上边开源的一个awd项目来搭建我们自己的练习平台。</h1><h1 id="比赛平台的拓扑图如下："><a href="#比赛平台的拓扑图如下：" class="headerlink" title="比赛平台的拓扑图如下："></a>比赛平台的拓扑图如下：</h1><h2 id="服务器全部以docker形式部署在同一台虚拟机上。"><a href="#服务器全部以docker形式部署在同一台虚拟机上。" class="headerlink" title="服务器全部以docker形式部署在同一台虚拟机上。"></a>服务器全部以docker形式部署在同一台虚拟机上。</h2><blockquote>
<p>Check_server：<br>服务检查服务器，用于判定选手维护的服务是否可用，如果不可用，则会扣除相应的分数。不开启任何端口。需要与flag服务器通信。</p>
</blockquote>
<blockquote>
<p>Flag_server：<br>选手提交flag的服务器，并存储选手的分数。开启80端口。</p>
</blockquote>
<blockquote>
<p>Web_server：<br>选手连接的服务器，选手需要对其进行维护，并尝试攻击其他队伍的机器。通常开启80端口，22端口，并将端口映射到主机。<br>首先呢，我们需要准备一台Ubuntu16.04版本的虚拟机了。当然如果你是土豪的话，可以准备一台搭载Ubuntu系统的云服务器来进行搭建这个平台，效果更佳哦。</p>
</blockquote>
<a id="more"></a>
<h1 id="第一步，要先给我们系统装上docker（也就是我们所说的容器）。这里我们选择的是docker-ce的最新版本。本人使用的是Ubuntu19版本系统"><a href="#第一步，要先给我们系统装上docker（也就是我们所说的容器）。这里我们选择的是docker-ce的最新版本。本人使用的是Ubuntu19版本系统" class="headerlink" title="第一步，要先给我们系统装上docker（也就是我们所说的容器）。这里我们选择的是docker-ce的最新版本。本人使用的是Ubuntu19版本系统"></a>第一步，要先给我们系统装上docker（也就是我们所说的容器）。这里我们选择的是docker-ce的最新版本。本人使用的是Ubuntu19版本系统</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1．卸载旧版本的docker（要是新安装的系统就可以跳过这步了）</span><br><span class="line">sudo apt-getremove docker docker-engine docker docker.io deocker-ce</span><br><span class="line">2．更新apt包索引</span><br><span class="line"><span class="comment"># sudo apt-get update</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3．安装一下依赖包</span><br><span class="line">sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">当遇到E:dpkg 被中断的情况，输入sudo dpkg --configure -a来解决下问题。完成后继续安装依赖包。</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4．添加官方密钥</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5．添加下仓库</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line"></span><br><span class="line"><span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">stable"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6．再次更新下apt包索引</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo apt-get update</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7．开始安装docker</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8．查看docker版本确保我们的docker安装成功。</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<h1 id="第二步，将GitHub上的项目克隆下来，搭建起训练平台。"><a href="#第二步，将GitHub上的项目克隆下来，搭建起训练平台。" class="headerlink" title="第二步，将GitHub上的项目克隆下来，搭建起训练平台。"></a>第二步，将GitHub上的项目克隆下来，搭建起训练平台。</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.克隆github上前辈留下来的开源项目。（有点大，需要花点时间）</span><br><span class="line"></span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/zhl2008/awd-platform.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2．进入克隆好的项目里</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> awd-platform/</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3．下载所需的镜像</span><br><span class="line"></span><br><span class="line">sudo docker pull zhl2008/web_14.04</span><br><span class="line"></span><br><span class="line">此步建议更改一下镜像名字（否则有可能报错）</span><br><span class="line">docker tag zhl2008/web_14.04 web_14.04</span><br></pre></td></tr></table></figure>

<h1 id="至此，AWD环境准备工作已经完成，接下来开始启动AWD环境"><a href="#至此，AWD环境准备工作已经完成，接下来开始启动AWD环境" class="headerlink" title="至此，AWD环境准备工作已经完成，接下来开始启动AWD环境"></a>至此，AWD环境准备工作已经完成，接下来开始启动AWD环境</h1><h2 id="根据队伍数量来copy队伍的比赛文件夹。-建议使用python2命令，环境脚本是基于python2编写的"><a href="#根据队伍数量来copy队伍的比赛文件夹。-建议使用python2命令，环境脚本是基于python2编写的" class="headerlink" title="根据队伍数量来copy队伍的比赛文件夹。(建议使用python2命令，环境脚本是基于python2编写的)"></a>根据队伍数量来copy队伍的比赛文件夹。(建议使用python2命令，环境脚本是基于python2编写的)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 batch.py web_server 2</span><br></pre></td></tr></table></figure>
<h2 id="启动比赛"><a href="#启动比赛" class="headerlink" title="启动比赛"></a>启动比赛</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 start.py ./ 2</span><br></pre></td></tr></table></figure>

<h2 id="启动裁判靶机（check脚本）"><a href="#启动裁判靶机（check脚本）" class="headerlink" title="启动裁判靶机（check脚本）"></a>启动裁判靶机（check脚本）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach check_server</span><br><span class="line"></span><br><span class="line">python2 check.py</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改了check时间和flag刷新时间，原版是2分钟刷一次，太快了。所以改成了5分钟一次。修改方法只要将/awd-platform/check_server/gen_flag.py  的time_span 变量设置为5*60即可，也可以改成其他的，同理还有/awd-platform/flag_server/config.php 的 min_time_span变量设置为300、/awd-platform/flag.py 变量time_span设置为5*60。</span><br></pre></td></tr></table></figure>
<h2 id="关闭环境的命令。"><a href="#关闭环境的命令。" class="headerlink" title="关闭环境的命令。"></a>关闭环境的命令。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 stop_clean.py</span><br></pre></td></tr></table></figure>

<h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><h2 id="查看计分板信息：原版中计分板有点low，直接访问ip-8080-score-txt。"><a href="#查看计分板信息：原版中计分板有点low，直接访问ip-8080-score-txt。" class="headerlink" title="查看计分板信息：原版中计分板有点low，直接访问ip:8080/score.txt。"></a>查看计分板信息：原版中计分板有点low，直接访问ip:8080/score.txt。</h2><h2 id="靶机端口规则：-假设服务器ip为192-168-1-1"><a href="#靶机端口规则：-假设服务器ip为192-168-1-1" class="headerlink" title="靶机端口规则：(假设服务器ip为192.168.1.1)"></a>靶机端口规则：(假设服务器ip为192.168.1.1)</h2><pre><code> Team1：192.168.1.1:8801
 Team2：192.168.1.1:8802
 Team3：192.168.1.1:8803
 ……
 以此类推

各个靶机的ssh密码可以在项目的文件夹下的pass.txt文件中，开始比赛时告知各个选手ssh密码。</code></pre><h2 id="SSH的端口规则为：-假设服务器ip为192-168-1-1"><a href="#SSH的端口规则为：-假设服务器ip为192-168-1-1" class="headerlink" title="SSH的端口规则为：(假设服务器ip为192.168.1.1)"></a>SSH的端口规则为：(假设服务器ip为192.168.1.1)</h2><pre><code>Team1：192.168.1.1:2201
Team2：192.168.1.1:2202
Team3：192.168.1.1:2203
  ……
以此类推</code></pre><h2 id="提交flag方法：-假设服务器ip为192-168-1-1"><a href="#提交flag方法：-假设服务器ip为192-168-1-1" class="headerlink" title="提交flag方法：(假设服务器ip为192.168.1.1)"></a>提交flag方法：(假设服务器ip为192.168.1.1)</h2><pre><code>http://192.168.1.1:8080/flag_file.php?token=teamX&amp;flag=xxxx
(teamX中的X为自己队伍号，flag为其他队伍的flag)</code></pre><h2 id="攻击情况：-假设服务器ip为192-168-1-1"><a href="#攻击情况：-假设服务器ip为192-168-1-1" class="headerlink" title="攻击情况：(假设服务器ip为192.168.1.1)"></a>攻击情况：(假设服务器ip为192.168.1.1)</h2><pre><code>http://192.168.1.1:8080/result.txt</code></pre>]]></content>
      <tags>
        <tag>信息安全学习</tag>
      </tags>
  </entry>
  <entry>
    <title>添加音乐插件</title>
    <url>/2019/11/02/%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装音乐插件"><a href="#安装音乐插件" class="headerlink" title="安装音乐插件"></a>安装音乐插件</h1><h2 id="首先在站点文件夹根目录安装插件："><a href="#首先在站点文件夹根目录安装插件：" class="headerlink" title="首先在站点文件夹根目录安装插件："></a>首先在站点文件夹根目录安装插件：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><a id="more"></a>
<h3 id="在文章中的写法："><a href="#在文章中的写法：" class="headerlink" title="在文章中的写法："></a>在文章中的写法：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title : 曲目标题</span><br><span class="line">author: 曲目作者</span><br><span class="line">url: 音乐文件 URL 地址</span><br><span class="line">picture_url: (可选) 音乐对应的图片地址</span><br><span class="line">narrow: （可选）播放器袖珍风格</span><br><span class="line">autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">width:xxx:(可选) 播放器宽度(默认: 100%)</span><br><span class="line">lrc:xxx: (可选）歌词文件 URL 地址</span><br></pre></td></tr></table></figure>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer <span class="string">"歌曲名"</span> <span class="string">"歌手名"</span> <span class="string">"https://什么什么什么.mp3"</span> <span class="string">"https://封面图.jpg"</span> <span class="string">"lrc:https://歌词.lrc"</span> %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="除了使用标签-lrc-选项来设定歌词，你也可以直接使用-aplayerlrc-标签来直接插入歌词文本在博客中："><a href="#除了使用标签-lrc-选项来设定歌词，你也可以直接使用-aplayerlrc-标签来直接插入歌词文本在博客中：" class="headerlink" title="除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中："></a>除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% aplayerlrc <span class="string">"title"</span> <span class="string">"author"</span> <span class="string">"url"</span> <span class="string">"封面(选填)"</span> <span class="string">"autoplay"</span> %&#125;</span><br><span class="line">[00:00.00]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取歌词"><a href="#获取歌词" class="headerlink" title="获取歌词"></a>获取歌词</h2><h3 id="歌词的获取，可以直接找到各层次文件，或者可以直接在网易云上通过以下方法获取"><a href="#歌词的获取，可以直接找到各层次文件，或者可以直接在网易云上通过以下方法获取" class="headerlink" title="歌词的获取，可以直接找到各层次文件，或者可以直接在网易云上通过以下方法获取:"></a>歌词的获取，可以直接找到各层次文件，或者可以直接在网易云上通过以下方法获取:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://music.163.com/api/song/media?id=863046037</span><br></pre></td></tr></table></figure>
<h3 id="其中id为网易云歌曲的id，打开链接之后，可以把”lyric”字段的值复制下来，再删除-n就可以直接放到aplayerlrc标签中了，这样就可以有歌词出现"><a href="#其中id为网易云歌曲的id，打开链接之后，可以把”lyric”字段的值复制下来，再删除-n就可以直接放到aplayerlrc标签中了，这样就可以有歌词出现" class="headerlink" title="其中id为网易云歌曲的id，打开链接之后，可以把”lyric”字段的值复制下来，再删除\n就可以直接放到aplayerlrc标签中了，这样就可以有歌词出现"></a>其中id为网易云歌曲的id，打开链接之后，可以把”lyric”字段的值复制下来，再删除\n就可以直接放到aplayerlrc标签中了，这样就可以有歌词出现</h3>]]></content>
      <tags>
        <tag>博客运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用运维命令</title>
    <url>/2019/11/02/Linux%E5%B8%B8%E7%94%A8%E8%BF%90%E7%BB%B4%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查看哪些端口被打开"><a href="#查看哪些端口被打开" class="headerlink" title="查看哪些端口被打开"></a>查看哪些端口被打开</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure>
<h2 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口:"></a>关闭端口:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --dport 端口号-j DROP</span><br><span class="line">端口号改为要关闭的端口号即可，譬如８０</span><br></pre></td></tr></table></figure>
<h2 id="打开端口："><a href="#打开端口：" class="headerlink" title="打开端口："></a>打开端口：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -ptcp --dport  端口号-j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="保存设置"><a href="#保存设置" class="headerlink" title="保存设置:"></a>保存设置:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Ubuntu升级命令"><a href="#Ubuntu升级命令" class="headerlink" title="Ubuntu升级命令"></a>Ubuntu升级命令</h1><h2 id="检查当前CentOS版本："><a href="#检查当前CentOS版本：" class="headerlink" title="检查当前CentOS版本："></a>检查当前CentOS版本：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>
<h2 id="使用yum进行升级："><a href="#使用yum进行升级：" class="headerlink" title="使用yum进行升级："></a>使用yum进行升级：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>
<h2 id="升级之后重启一下服务器"><a href="#升级之后重启一下服务器" class="headerlink" title="升级之后重启一下服务器"></a>升级之后重启一下服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="删除升级之后多余的旧内核"><a href="#删除升级之后多余的旧内核" class="headerlink" title="删除升级之后多余的旧内核"></a>删除升级之后多余的旧内核</h2><h3 id="安装yum-utli"><a href="#安装yum-utli" class="headerlink" title="安装yum-utli:"></a>安装yum-utli:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<h3 id="设置你想要保留多少旧的内核，比如我想保留两个-最少保留一个"><a href="#设置你想要保留多少旧的内核，比如我想保留两个-最少保留一个" class="headerlink" title="设置你想要保留多少旧的内核，比如我想保留两个(最少保留一个):"></a>设置你想要保留多少旧的内核，比如我想保留两个(最少保留一个):</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package-cleanup --oldkernels --count=2</span><br></pre></td></tr></table></figure>
<h3 id="注意：此处需要有root权限才能正常使用，如没有权限需要用sudo命令"><a href="#注意：此处需要有root权限才能正常使用，如没有权限需要用sudo命令" class="headerlink" title="注意：此处需要有root权限才能正常使用，如没有权限需要用sudo命令"></a>注意：此处需要有root权限才能正常使用，如没有权限需要用sudo命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo package-cleanup --oldkernels --count=2</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Java权限修饰符</title>
    <url>/2019/11/02/Java%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="四种权限修饰符的范围如下："><a href="#四种权限修饰符的范围如下：" class="headerlink" title="四种权限修饰符的范围如下："></a>四种权限修饰符的范围如下：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>&gt;<span class="keyword">protected</span>&gt;(<span class="keyword">default</span>)&gt;<span class="keyword">private</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO博客搭建教程</title>
    <url>/2019/11/02/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>Ubuntu下部署hexo博客</center>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1>]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
